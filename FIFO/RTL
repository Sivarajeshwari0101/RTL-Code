module FIFO(clk,rst,empty,full,data,out,re,we);
input clk,rst,re,we;
input [7:0]data;
output reg[7:0]out;
output empty,full;

reg [3:0] re_ptr=4'b0;
reg [3:0] wr_ptr=4'b0;
reg [4:0] fifo_counter;

reg [7:0] mem [15:0];
integer i;

always@(posedge clk)
begin
   if(rst)
       fifo_counter<=0;
	else if(!full && we)
	    fifo_counter<=fifo_counter+1;
   else if(!empty && re)
	    fifo_counter<=fifo_counter-1;
	else
	    fifo_counter<=fifo_counter;
end

always@(posedge clk)
begin
 if(rst)
	begin
	 wr_ptr<=0;
   for(i=0;i<16;i=i+1)
	   mem[i]<=0;
   end
 else if((we==1'b1) && (full==1'b0))
  begin
    mem[wr_ptr]<=data;
	 wr_ptr<=wr_ptr+1;
	end
 else
   wr_ptr<=wr_ptr;
end

always@(posedge clk)
begin
  if(rst)
  begin
    re_ptr<=4'b0;
	 out<=8'b0;
	end
  else if((re==1'b1) && (empty==1'b0))
  begin
   out<=mem[re_ptr];
	re_ptr<=re_ptr+1;
  end
	else
	  re_ptr<=re_ptr;
end

assign empty=(fifo_counter==5'b00000)?1'b1:1'b0;
assign full=(fifo_counter==5'b10000)?1'b1:1'b0;

endmodule
